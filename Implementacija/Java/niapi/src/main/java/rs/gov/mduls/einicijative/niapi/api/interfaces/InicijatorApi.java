/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.0.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package rs.gov.mduls.einicijative.niapi.api.interfaces;

import rs.gov.mduls.einicijative.niapi.api.model.InicijatorInicijativaOdgovor;
import rs.gov.mduls.einicijative.niapi.api.model.InicijatorInicijativaZahtev;
import rs.gov.mduls.einicijative.niapi.api.model.InicijatorListaInicijativaOdgovor;
import rs.gov.mduls.einicijative.niapi.api.model.InicijatorNovaInicijativaOdgovor;
import rs.gov.mduls.einicijative.niapi.api.model.InicijatorPozivnicaOdgovor;
import rs.gov.mduls.einicijative.niapi.api.model.InicijatorPozivnicaZahtev;
import rs.gov.mduls.einicijative.niapi.api.model.InicijatorPrilogInicijativeOdgovor;
import rs.gov.mduls.einicijative.niapi.api.model.InicijatorPrilogInicijativeZahtev;
import rs.gov.mduls.einicijative.niapi.api.model.InicijatorProfilBiografijaZahtev;
import rs.gov.mduls.einicijative.niapi.api.model.InicijatorProfilEmailZahtev;
import rs.gov.mduls.einicijative.niapi.api.model.InicijatorProfilOdgovor;
import rs.gov.mduls.einicijative.niapi.api.model.Uspeh;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;

import jakarta.validation.Valid;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-09-17T13:23:05.888263500+01:00[Europe/London]")
@Validated
public interface InicijatorApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * PUT /inicijator/biografija
     * Inicijator postavlja svoju biografiju
     *
     * @param inicijatorProfilBiografijaZahtev  (required)
     * @return Uspeh (status code 200)
     *         or Aplikativne greske (pogresan sadrzaj) (status code 400)
     *         or Neispravna ili istekla sesija (status code 401)
     *         or Neocekivane programske greske (status code 500)
     */
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/inicijator/biografija",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<Uspeh> inicijatorBiografijaPut(
            @Valid @RequestBody InicijatorProfilBiografijaZahtev inicijatorProfilBiografijaZahtev
    ) throws Exception;


    /**
     * PUT /inicijator/email
     * Inicijator podešava svoju email adresu za kontakt
     *
     * @param inicijatorProfilEmailZahtev  (required)
     * @return Uspeh (status code 200)
     *         or Aplikativne greske (pogresan sadrzaj) (status code 400)
     *         or Neispravna ili istekla sesija (status code 401)
     *         or Neocekivane programske greske (status code 500)
     */
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/inicijator/email",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<Uspeh> inicijatorEmailPut(
            @Valid @RequestBody InicijatorProfilEmailZahtev inicijatorProfilEmailZahtev
    ) throws Exception;


    /**
     * GET /inicijator/inicijativa/{idInicijative}
     * Detalji inicijative
     *
     * @param idInicijative  (required)
     * @return Detalji inicijative (status code 200)
     *         or Aplikativne greske (pogresan sadrzaj) (status code 400)
     *         or Neispravna ili istekla sesija (status code 401)
     *         or Neocekivane programske greske (status code 500)
     */
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/inicijator/inicijativa/{idInicijative}",
        produces = { "application/json" }
    )
    ResponseEntity<InicijatorInicijativaOdgovor> inicijatorInicijativaIdInicijativeGet(
            @PathVariable("idInicijative") Long idInicijative
    ) throws Exception;

    /**
     * PUT /inicijator/inicijativa/{idInicijative}/napusti
     * Član inicijativnog odbora obeležava inicijativu kao napuštenu (pre podnošenja)
     *
     * @param idInicijative  (required)
     * @return Uspeh (status code 200)
     *         or Aplikativne greske (pogresan sadrzaj) (status code 400)
     *         or Neispravna ili istekla sesija (status code 401)
     *         or Neocekivane programske greske (status code 500)
     */
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/inicijator/inicijativa/{idInicijative}/napusti",
        produces = { "application/json" }
    )
    ResponseEntity<Uspeh> inicijatorInicijativaIdInicijativeNapustiPut(
            @PathVariable("idInicijative") Long idInicijative
    );


    /**
     * PUT /inicijator/inicijativa/{idInicijative}/podnesi
     * Član inicijativnog odbora podnosi inicijativu na formalnu proveru predsedniku skupštine
     *
     * @param idInicijative  (required)
     * @return Uspeh (status code 200)
     *         or Aplikativne greske (pogresan sadrzaj) (status code 400)
     *         or Neispravna ili istekla sesija (status code 401)
     *         or Neocekivane programske greske (status code 500)
     */
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/inicijator/inicijativa/{idInicijative}/podnesi",
        produces = { "application/json" }
    )
    ResponseEntity<Uspeh> inicijatorInicijativaIdInicijativePodnesiPut(
            @PathVariable("idInicijative") Long idInicijative
    );


    /**
     * PUT /inicijator/inicijativa/{idInicijative}/pokreni
     * Član inicijativnog odbora pokreće inicijativu koja je skupila dovoljan broj potpisa
     *
     * @param idInicijative  (required)
     * @return Uspeh (status code 200)
     *         or Aplikativne greske (pogresan sadrzaj) (status code 400)
     *         or Neispravna ili istekla sesija (status code 401)
     *         or Neocekivane programske greske (status code 500)
     */
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/inicijator/inicijativa/{idInicijative}/pokreni",
        produces = { "application/json" }
    )
    ResponseEntity<Uspeh> inicijatorInicijativaIdInicijativePokreniPut(
            @PathVariable("idInicijative") Long idInicijative
    );


    /**
     * DELETE /inicijator/inicijativa/{idInicijative}/pozivnica
     * Inicijator briše pozivnicu
     *
     * @param idInicijative  (required)
     * @return Uspešno kreiran prilog inicijative (status code 200)
     *         or Aplikativne greske (pogresan sadrzaj) (status code 400)
     *         or Neispravna ili istekla sesija (status code 401)
     *         or Neocekivane programske greske (status code 500)
     */
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/inicijator/inicijativa/{idInicijative}/pozivnica",
        produces = { "application/json" }
    )
    ResponseEntity<Uspeh> inicijatorInicijativaIdInicijativePozivnicaDelete(
            @PathVariable("idInicijative") Long idInicijative
    );


    /**
     * POST /inicijator/inicijativa/{idInicijative}/pozivnica
     * Inicijator kreira novu pozivnicu budućem članu inicijativnog odboara
     *
     * @param idInicijative  (required)
     * @return Uspešno kreirana pozivnica (status code 200)
     *         or Aplikativne greske (pogresan sadrzaj) (status code 400)
     *         or Neispravna ili istekla sesija (status code 401)
     *         or Neocekivane programske greske (status code 500)
     */
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/inicijator/inicijativa/{idInicijative}/pozivnica",
        produces = { "application/json" }
    )
    ResponseEntity<InicijatorPozivnicaOdgovor> inicijatorInicijativaIdInicijativePozivnicaPost(
            @PathVariable("idInicijative") Long idInicijative
    );


    /**
     * PUT /inicijator/inicijativa/{idInicijative}/pozivnica
     * Pozvani građanin upotrebljava pozivnicu i postaje član inicijativnog odbora
     *
     * @param idInicijative  (required)
     * @param inicijatorPozivnicaZahtev  (required)
     * @return Uspešno kreiran prilog inicijative (status code 200)
     *         or Aplikativne greske (pogresan sadrzaj) (status code 400)
     *         or Neispravna ili istekla sesija (status code 401)
     *         or Neocekivane programske greske (status code 500)
     */
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/inicijator/inicijativa/{idInicijative}/pozivnica",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<Uspeh> inicijatorInicijativaIdInicijativePozivnicaPut(
            @PathVariable("idInicijative") Long idInicijative,
            @Valid @RequestBody InicijatorPozivnicaZahtev inicijatorPozivnicaZahtev
    );


    /**
     * DELETE /inicijator/inicijativa/{idInicijative}/prilog/{idPriloga}
     * Inicijator briše postojeći prilog inicijative
     *
     * @param idInicijative  (required)
     * @param idPriloga  (required)
     * @return Uspešno kreiran prilog inicijative (status code 200)
     *         or Aplikativne greske (pogresan sadrzaj) (status code 400)
     *         or Neispravna ili istekla sesija (status code 401)
     *         or Neocekivane programske greske (status code 500)
     */
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/inicijator/inicijativa/{idInicijative}/prilog/{idPriloga}",
        produces = { "application/json" }
    )
    ResponseEntity<Uspeh> inicijatorInicijativaIdInicijativePrilogIdPrilogaDelete(
            @PathVariable("idInicijative") Long idInicijative,
            @PathVariable("idPriloga") Long idPriloga
    ) throws Exception;


    /**
     * PUT /inicijator/inicijativa/{idInicijative}/prilog/{idPriloga}
     * Inicijator menja postojeći prilog inicijative
     *
     * @param idInicijative  (required)
     * @param idPriloga  (required)
     * @param inicijatorPrilogInicijativeZahtev  (required)
     * @return Uspešno kreiran prilog inicijative (status code 200)
     *         or Aplikativne greske (pogresan sadrzaj) (status code 400)
     *         or Neispravna ili istekla sesija (status code 401)
     *         or Neocekivane programske greske (status code 500)
     */
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/inicijator/inicijativa/{idInicijative}/prilog/{idPriloga}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<InicijatorPrilogInicijativeOdgovor> inicijatorInicijativaIdInicijativePrilogIdPrilogaPut(
            @PathVariable("idInicijative") Long idInicijative,
            @PathVariable("idPriloga") Long idPriloga,
            @Valid @RequestBody InicijatorPrilogInicijativeZahtev inicijatorPrilogInicijativeZahtev
    ) throws Exception;


    /**
     * POST /inicijator/inicijativa/{idInicijative}/prilog
     * Inicijator kreira novi prilog inicijative
     *
     * @param idInicijative  (required)
     * @param inicijatorPrilogInicijativeZahtev  (required)
     * @return Uspešno kreiran prilog inicijative (status code 200)
     *         or Aplikativne greske (pogresan sadrzaj) (status code 400)
     *         or Neispravna ili istekla sesija (status code 401)
     *         or Neocekivane programske greske (status code 500)
     */
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/inicijator/inicijativa/{idInicijative}/prilog",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<InicijatorPrilogInicijativeOdgovor> inicijatorInicijativaIdInicijativePrilogPost(
            @PathVariable("idInicijative") Long idInicijative,
            @Valid @RequestBody InicijatorPrilogInicijativeZahtev inicijatorPrilogInicijativeZahtev
    ) throws Exception;


    /**
     * PUT /inicijator/inicijativa/{idInicijative}
     * Inicijator menja postojeću inicijativu (glavni deo)
     *
     * @param idInicijative  (required)
     * @param inicijatorInicijativaZahtev  (required)
     * @return Uspešno promenjena inicijativa (status code 200)
     *         or Aplikativne greske (pogresan sadrzaj) (status code 400)
     *         or Neispravna ili istekla sesija (status code 401)
     *         or Neocekivane programske greske (status code 500)
     */
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/inicijator/inicijativa/{idInicijative}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<Uspeh> inicijatorInicijativaIdInicijativePut(
            @PathVariable("idInicijative") Long idInicijative,
            @Valid @RequestBody InicijatorInicijativaZahtev inicijatorInicijativaZahtev
    ) throws Exception;


    /**
     * GET /inicijator/inicijativa/pofaziobrade/{idFazeObrade}
     * Lista inicijativa koje čekaju odobrenje na odgovarajućem nivou
     *
     * @param idFazeObrade  (required)
     * @return Lista inicijativa u čijim je inicijativnim odborima inicijator za zadatu fazu obrade (status code 200)
     *         or Aplikativne greske (pogresan sadrzaj) (status code 400)
     *         or Neispravna ili istekla sesija (status code 401)
     *         or Neocekivane programske greske (status code 500)
     */
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/inicijator/inicijativa/pofaziobrade/{idFazeObrade}",
        produces = { "application/json" }
    )
    ResponseEntity<InicijatorListaInicijativaOdgovor> inicijatorInicijativaPofaziobradeIdFazeObradeGet(
            @PathVariable("idFazeObrade") String idFazeObrade
    ) throws Exception;


    /**
     * POST /inicijator/inicijativa
     * Inicijator kreira novu inicijativu
     *
     * @param inicijatorInicijativaZahtev  (required)
     * @return Uspešno kreirana inicijativa (status code 200)
     *         or Aplikativne greske (pogresan sadrzaj) (status code 400)
     *         or Neispravna ili istekla sesija (status code 401)
     *         or Neocekivane programske greske (status code 500)
     */
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/inicijator/inicijativa",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<InicijatorNovaInicijativaOdgovor> inicijatorInicijativaPost(
            @Valid @RequestBody InicijatorInicijativaZahtev inicijatorInicijativaZahtev
    ) throws Exception;


    /**
     * GET /inicijator/profil
     * Upit detalja profila inicijatora
     *
     * @return Detalji profila inicijatora (status code 200)
     *         or Aplikativne greske (pogresan sadrzaj) (status code 400)
     *         or Neispravna ili istekla sesija (status code 401)
     *         or Neocekivane programske greske (status code 500)
     */
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/inicijator/profil",
        produces = { "application/json" }
    )
    ResponseEntity<InicijatorProfilOdgovor> inicijatorProfilGet(
    ) throws Exception;

}
